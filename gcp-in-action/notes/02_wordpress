-------------------------------------------------------------------------------
| CHAPTER 2 - DEPLOYING WORDPRESS                                             |
-------------------------------------------------------------------------------

- For our WordPress installation, we will need:

    1. A VM with WordPress and Apache installed
    2. A SQL database



- To start a cloud SQL instance:

    > Cloud Console > Storage > SQL > Create Instance

    name: wordpress-db
    pw: longpassword!
    version: MySQL 5.7


    - By default, Cloud SQL starts with a 10GB SSD, and the size of the disk
        automatically increases as needed.


    - Now we can see our new SQL instance from the SDK console:

        $ gcloud sql instances list



- Securing the Cloud SQL Instance

    - Change the password for the root user

        $ gcloud sql users set-password root --host "%" --password "longpassword2!" 
                --instance wordpress-db


    - Now, for testing, we'll temporarily open the SQL instance to the outside world.  We'll
        add '0.0.0.0/0', which means all possible IP addresses.  Obviously, we should never have
        a production database set up like this.

        > Cloud SQL Instance > Connections > Authorized Networks > Add Network
        > CIDR: 0.0.0.0/0



- Connecting to the Cloud SQL Instance

    - First, we need to install the MySQL client locally.

        $ sudo apt-get install -y mysql-client


    - Now, we can connect to our cloud instance:

        # Get ip address
        $ gcloud sql instances list

        # Connect to cloud instance
        $ mysql -h 104.197.207.227 -u root -p


    - Connected to our cloud instance, let's create the database.

        mysql> CREATE DATABASE wordpress;

        mysql> CREATE USER wordpress IDENTIFIED BY 'very-long-wordpress-password';

        mysql> GRANT ALL PRIVILEGES ON wordpress.* TO wordpress;

        # Reload privileges without restarting
        mysql> FLUSH PRIVILEGES;



- Creating the WordPress VM

    - Create a new VM:

        name: wordpress
        http and https: enabled


    - Connect to it:

        $ gcloud compute ssh --zone us-central1-a wordpress


    - Install Apache, the MySQL client, and PHP:

        $ sudo apt update

        $ sudo apt install apache2 
        $ sudo apt install default-mysql-client
        $ sudo apt install php7.0
        $ sudo apt install php-mysql 
        $ sudo apt install libapache2-mod-php php-gd


    - Install mcrypt PHP package:

        # Install prereqs
        $ sudo apt install php-dev libmcrypt-dev php-pear

        # Install mcrypt module
        $ sudo pecl channel-update pecl.php.net
        $ sudo pecl install mcrypt

        # Verify mcrypt module is present
        php -m | grep mcrypt



- Install Wordpress on the VM

    - Download the latest version of WordPress to the VM:

        $ sudo apt install wget
        $ wget http://wordpress.org/latest.tar.gz
        $ tar xzvf latest.tar.gz


    - Copy the sample config file:

        $ cd wordpress
        $ cp wp-config-sample.php wp-config.


    - Edit it to reflect our MySQL installation:

        /** MySQL settings - You can get this info from your web host **/

        /** The name of the database for WordPress */
        define('DB_NAME', 'wordpress');

        /** MySQL database username */
        define('DB_USER', 'wordpress');

        /** MySQL database password */
        define('DB_PASSWORD', 'very-long-wordpress-password');

        /** MySQL hostname */
        define('DB_HOST', '104.197.207.227');


    - Now, we move the WordPress files into a location so that Apache can serve them.

        # Remove default Apache page
        $ sudo rm /var/www/html/index.html

        # Move WordPress files
        $ sudo apt install rsync
        $ sudo rsync -avP ~/wordpress/ /var/www/html/


    - Now, we should be able to navigate to the WordPress site:

        http://34.122.115.14


    - Finally, for security, we should change the IPs that are allowed to connect to the
        database from all ('0.0.0.0/0') to only our VM ('34.122.115.14/32').

      The VM of our IP address could change, so we'll learn how to reserve a static IP 
        address later.