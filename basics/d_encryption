-------------------------------------------------------------------------------
| PART D - ENCRYPTION                                                         |
-------------------------------------------------------------------------------

- Encryption, Decryption, and Cracking

    - Caesar Ciphers

        - Encrypt

            Plaintext: ALEXANDRIA SOON
            Shift: 6

            Encrypted: CNGZCPFTKC UQQP


        - Decrypt

            Encrypted: FURVV WKH UXELFRQ
            Shift: 3

            Plaintext: CROSS THE RUBICON


    - Cracking a Cipher

        - Frequency Analysis

            - Human languages tend to use some letters more than others.  For example, 'E'
                is the most used letter in English.

            - So, we can look for the most common character in the encryped text and guess
                that it decryptes to E.


        - Known Plaintext

            - If we already know some part of the plaintext, it will be easier to crack
                the rest of the encrypted version.

            - In WWII, German messages always started with a weather forecast, which made
                them much easier for Alan Turing to crack.


        - Brute Force

            - We could just try each of the 25 shift possibilities and see which one revealed
                a message that makes sense.

            - We wouldn't need to do this for the entire message, just the first word or 2.



- Symettric Encryption Techniques

    - Vigenere Cipher

        - Invented by French cryptologists in mid 1500s.  Was thought to be 'unbreakable'
            by Lewis Caroll in 1868.


        - Encryption

            - Uses entire word as shift key instead of Caesar Cipher's single shift amount.

                Plain text: VERSAILLES
                Shift key:  CHEESE

                            VERSAILLES
                            CHEESECHEE


                Vigenere Table:

                - A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
                A A B C D ... 
                B B C D E ...
                C C D E F ...
                D
                E
                F
                G
                H
                I
                J
                K
                L
                M
                N
                O
                P
                Q
                R
                S
                T
                U
                V V W X Y X ....    
                W
                X
                Y
                Z

                So to encode 'V', we go to row V, and look at column 'C', and get 'X'.

                Encrypted:  XLVWSMNSIW


        - Decryption

            Encrypted:  NVYZJI
            Shift Key:  CHEESE

            We do a reverse substitution in the table.

            Plaintext:  LOUVRE


        - Cracking the Cipher

            - If an intercepter didn't know the shift key, they would have to try out all
                possible shift words in the world, possibly including made-up ones.

            - In the 1800s, people figured out how to use frequency analysis to crack the
                cipher.  They would look for often-used words like 'THE', and that may
                reveal possible lengths of the shift key.

            - With the speed of computers, ciphers like this are easy to crack.



- Modern ciphers

    - Modern ciphers have to be hard to crack by a computer that can do trillions of
        calculations per second.  

    - One of the most common encryption standards is AES-128, a block cipher that uses
        128-bit keys.  That means there are 2**128 possible keys.

    - AES-128 also requires a sequence of 10 mathematical operations for each bit of
        the key.  So, it would take the world's fastest computer 500 trillion years to
        try each possible key.

    - Frequency analysis won't work, since the multi step sequence ensures the AES cipher
        won't reveal any information about the original text.

    - Cryptography research is done out in the open, so hopefully the public will figure
        out a security breach before a cybercriminal does.



- Public Key Encryption

    - Step 1: Key Generation

        - Each person generates a pair of keys, a public key and private key.

        - The keys are generated by multiplying together 2 incredibly large prime numbers.

        - The RSA algorithm that generates the keys repeatedly generates random large 
            numbers and checks if they are prime, until it finds 2 random large primes.  This
            is why generating the keys takes a few seconds to complete.

        - Earlier keys were 512 bits long.  The current recommended key length is 2048 bits.


    - Step 2: Key Exchange

        - The sending and receiving computers exchange public keys with each other via a
            reliable channel like TCP/IP.  The private keys are never exchanged.

                     <---  SERVER_PUBLIC_KEY  ---
            CLIENT                                    SERVER
                      ---  CLIENT_PUBLIC_KEY  --->


    - Step 3: Encryption

        - The sending computer encrypts the secret data using the receiving computer's
            public key and a mathematical operation.

        - The power of public key encryption is in that mathematical operation, which is
            a 'one-way function', meaning it is incredibly difficult to reverse.  Even
            the public key cannot be used to decrypt the data.


    - Step 4: Send the Encrypted Data

        - The sender can now safely transmit the encrypted data over the internet without
            worry of onlookers.


    - Step 5: Decryption

        - Now the receiver can decrypt the message using their private key.  It's the only
            key that can be used to decrypt the message.


    - Why Does This Work?

        - For a long time, mathematicians weren't sure if it was possible.  This way was
            discovered in the 1970s.  

        - The math relies on prime numbers, the difficulty of factoring large primes, and
            modular arithmetic.



- Transport Layer Security

    - Basics of TLS

        - The TLS protocol (formerly called SSL) adds a layer of security on top of the 
            TCP/IP transport protocols.
        
        - It uses both symmetric and public key encryption for securely sending private data.

        - It adds additional security features, such as authentication and message tampering
            detection.

        - It adds additional steps to the TCP/IP process, so it does add some latency.


    - Step 1: TCP Handshake

        - The client must first complete the TCP handshake.

                       ---    SYN   --->
            CLIENT     <---  SYN ACK  ----    SERVER
                       ---    ACK   --->


    - Step 2: TLS Initiation

        - The client must notify the server that it desires a TLS connection instead of
            the standard insecure connection.

                               ClientHello
                                 ProtocolVersion: TLS 1.3
            CLIENT    --->       CipherSuites:                  --->    SERVER
                                   [TLS_RSA_WITH_RC4_128_SHA]


    - Step 3: Server Confirmation of Protocol

        - If the server doesn't support the client's requested technologies, it will abort
            the connection.

        - As long as the server does support the requested TLS protocol version and other
            options, it will respond with a confirmation, plus a digital certificate that
            contains its public key.

                                ServerHello
            CLIENT      <---      ProtocolVersion: TLS 1.3                  <--- SERVER
                                  CiphterSuite: TLS_RSA_WITH_RC4_128_SHA

                                Certificate
                                  PublicKey: 7ba327f8aed3eea7a7fa96581d0

                                ServerHelloDone


    - Step 4: Certificate Verification

        - The server's digital certificate is the server's way of saying 'Yes I really am
            who you think I am.'

              Certificate = khanacademy.org ???

        - If the client doesn't think the certificate is legit, it will abort the connection.

        - Otherwise, if the client can verify the certificate, it continues to the next step.


    - Step 5: Shared Key Generation

        - Now, the client has the server's public key, so it can use public key
            encryption to encrypt the data that the server can decrypt with its private
            key.

        - However, public key encryption takes much more time that symmetric encryption
            due to the more difficult arithmetic operations involved.  When possible,
            computers use symmetric encryption to save time.

        - To do this, the computers:

            1. Use public key encryption to privately generate a shared key
            2. Then use that shared key to use symmetric encryption in future messages

        - The client starts this process by sending a message to the server with a
            'pre-master key' encrypted with the server's public key.

        - The client computes the shared key based on the pre-master key (since this is more
            secure than sending the shared key) and remembers the shared key locally.

        - Finally, the client sends a 'Finished' message whose contents are encrypted with 
            the shared key.

                               ClientKeyExchange
                CLIENT   --->    PreMasterSecret: c3ac534f4d919a0e92b966795e    --->   SERVER

                               ChangeCipherSpec

                               Finished
                                 21c124d28a548559f0f8abd4b


    - Step 6: Server Confirmation of Shared Key

        - The server can now compute the shared key based on the pre-master key, and attempt
            to decrypt the 'Finished' message with that key.

        - If it fails, it aborts the connection.

        - If the server can successfully decrypt the message with the key, it sends along a
            confirmation message with the shared key.  

                              ChangeCipherSpec
            CLIENT    <---                                   <---    SERVER
                              Finished
                                c49fe482d338760807c3c278f

    - Step 7: Send Secure Data

        - Finally, the client securely sends the private data to the server, using symmetric
            encryption and the shared key.

        - Often, the same client needs to send data to a server multiple times, like for 
            submission of multiple forms.  In that case, the computers can use an abbreviated
            process to establish the secure session.



- Digital Certificates

    - The Need for Digital Certificates

        - Before the sender can send data securely using the recipient's public key,
            the sender must verify the identity behind the public key.

        - A 'digital certificate' (aka a public key certificate or identity certificate)
            proves the ownership of an encryption key.

        - Certificates prevent man-in-the-middle attacks.

        - A digital certificate shows the identity behind a public key, but how can a 
            client trust the legitimacy of a digital certificate?  It must be genearated
            by a trusted Certificate Authority.


    - Certificate Authorities

        - A server that wants to communicate securely over TLS signs up with a CA.
            The CA verifies ownership of the domain, signs the certificate with their
            own name, and provides the signed certificate back to the server.

        - When a client gets the certificate, it sees the CA that is vouching for the
            authenticity of the public key.  But should it trust that CA?

        - Clients such as web browsers come bundled with a list of trusted CAs.

        - There are actually multiple layers of CAs: root CAs and intermediate CAs.  The
            root CA doesn't issue certificates to servers, it only issues certificates to
            intermediate CAs that act on its behalf.  The intermediate CAs issue 
            certificates to servers.  The layers increase the security of the system.



- HTTPS

    - When a website supports HTTPS and wants to make sure all of its users are served
        a secure connection, it should redirect all requests to the HTTPS version of the
        site.

    - Prevents tampering of website content, since packets cannot be altered.

    - Many organizations choose to serve all connections over HTTPS.  As of 2019, about half
        of the top million websites use HTTPS by default.